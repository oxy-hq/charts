# Integration test with ALL features enabled - maximum complexity
nameOverride: "oxy-test-all"
fullnameOverride: "oxy-test-all"

app:
  image: "ghcr.io/oxy-hq/oxy"
  imageTag: "0.2.28"
  imagePullPolicy: "IfNotPresent"

# Enable ingress with complex configuration
ingress:
  enabled: true
  ingressClassName: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/$2"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  path: "/api(/|$)(.*)"
  pathType: "Prefix"
  hosts:
    - host: "oxy-test-all.local"
      paths:
        - path: "/api"
          pathType: "Prefix"
        - path: "/health"
          pathType: "Exact"
    - host: "oxy-alt.local"
      paths:
        - path: "/"
          pathType: "Prefix"
  tls:
    - hosts:
        - "oxy-test-all.local"
        - "oxy-alt.local"
      secretName: "oxy-test-tls"

# Full resource configuration
resources:
  requests:
    cpu: "100m"
    memory: "128Mi"
  limits:
    cpu: "500m"
    memory: "512Mi"

# Complex environment variables
env:
  OXY_STATE_DIR: "/workspace/oxy_data"
  OXY_DATABASE_URL: "postgresql://testuser:testpass@test-postgres:5432/testdb"
  DEBUG: "true"
  LOG_LEVEL: "debug"
  CUSTOM_VAR: "test-value"

# Enable ConfigMap
configMap:
  enabled: true
  data:
    app.conf: |
      server {
        listen 3000;
        location / {
          return 200 'All features test OK';
        }
        location /health {
          return 200 'healthy';
        }
      }
    custom.json: |
      {
        "feature_flags": {
          "git_sync": true,
          "external_secrets": true,
          "persistence": true
        }
      }

# Service Account with annotations
serviceAccount:
  create: true
  name: "oxy-test-all-sa"
  annotations:
    "prometheus.io/scrape": "true"
    "prometheus.io/port": "8080"
    "prometheus.io/path": "/metrics"
    "eks.amazonaws.com/role-arn": "arn:aws:iam::123456789012:role/test-role"

# Full persistence configuration
persistence:
  enabled: true
  storageClassName: ""  # Use default
  size: "2Gi"
  accessMode: "ReadWriteOnce"
  mountPath: "/workspace"
  folder: "oxy_data"
  annotations:
    "volume.beta.kubernetes.io/storage-class": "standard"
  labels:
    "component": "storage"
  volumeMode: "Filesystem"
  selector:
    matchLabels:
      type: "test-storage"

# Node selection and tolerations
nodeSelector:
  kubernetes.io/arch: "amd64"

tolerations:
  - key: "test-taint"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"
  - key: "oxy-app"
    operator: "Exists"
    effect: "NoExecute"

# Custom service configuration
service:
  type: "ClusterIP"
  port: 80
  targetPort: 3000
  name: "oxy-all-service"

headlessService:
  enabled: true

# Enhanced probes
livenessProbe:
  httpGet:
    path: "/health"
    port: 3000
    httpHeaders:
      - name: "X-Health-Check"
        value: "liveness"
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  httpGet:
    path: "/health"
    port: 3000
    httpHeaders:
      - name: "X-Health-Check"
        value: "readiness"
  initialDelaySeconds: 15
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 2
  successThreshold: 1

# Security context
securityContext:
  fsGroup: 1000

# External secrets configuration (simulated)
externalSecrets:
  create: false  # Don't create ESO CRDs in CI
  envSecretNames:
    - "oxy-env-secrets"
    - "oxy-db-secrets"
  envSecretMappings:
    oxy-env-secrets:
      DATABASE_PASSWORD: "/secrets/db/password"
      API_KEY: "/secrets/api/key"
  fileSecrets:
    - name: "oxy-certs"
      key: "tls.crt"
      dest: "server.crt"
    - name: "oxy-certs"
      key: "tls.key"
      dest: "server.key"
  storeRef:
    name: "test-secret-store"
    kind: "SecretStore"

# Git sync configuration
gitSync:
  enabled: true
  period: "30s"
  repository: "https://github.com/octocat/Hello-World.git"
  branch: "master"
  userName: "test-user"
  userEmail: "test@example.com"
  sshSecretName: "oxy-git-ssh"
  root: "/workspace/git"
  link: "/workspace/current"
  imagePullPolicy: "IfNotPresent"

# Database configuration - enable internal postgres
database:
  postgres:
    enabled: true
    postgresqlPassword: "testpassword123"
    postgresqlDatabase: "oxydb_test"
    postgresqlUsername: "oxy_test"

# Init containers
extraInitContainers:
  - name: "init-permissions"
    image: "busybox:1.36"
    imagePullPolicy: "IfNotPresent"
    command: ["sh", "-c", "chmod 755 /workspace && chown 1000:1000 /workspace"]
    volumeMounts:
      - name: "workspace"
        mountPath: "/workspace"
  - name: "init-config"
    image: "busybox:1.36"
    imagePullPolicy: "IfNotPresent"
    command: ["sh", "-c", "echo 'init complete' > /workspace/init.log"]
    volumeMounts:
      - name: "workspace"
        mountPath: "/workspace"

# Sidecar containers
extraSidecars:
  - name: "log-forwarder"
    image: "busybox:1.36"
    imagePullPolicy: "IfNotPresent"
    command: ["sh", "-c", "while true; do echo $(date): log forwarding; sleep 30; done"]
    volumeMounts:
      - name: "workspace"
        mountPath: "/workspace"
  - name: "metrics-collector"
    image: "busybox:1.36"
    imagePullPolicy: "IfNotPresent"
    command: ["sh", "-c", "while true; do echo $(date): collecting metrics; sleep 60; done"]
    resources:
      requests:
        cpu: "10m"
        memory: "16Mi"
      limits:
        cpu: "50m"
        memory: "64Mi"