# Default values for oxy-app
# This is a YAML-formatted file.

# Application configuration
name: oxy-app

app:
  image: ghcr.io/oxy-hq/oxy
  imageTag: ""
  port: 3000
  replicaCount: 1
  imagePullPolicy: IfNotPresent
  # Optional override for the container command. When empty, the chart will
  # use the default shell wrapper that runs `oxy serve` (readonly if gitSync disabled).
  # Example: ["/app/bin/oxy", "serve"]
  command: []

# Semantic Engine configuration (Cube.js sidecar)
# Only deployed when gitSync.enabled is true
semanticEngine:
  image: ghcr.io/oxy-hq/oxy-semantic-engine
  # imageTag defaults to app.imageTag if not specified
  imageTag: ""
  imagePullPolicy: IfNotPresent

# Ingress configuration
# Enable and configure Kubernetes Ingress for the application.
ingress:
  enabled: false
  # ingressClassName allows selecting a specific IngressClass (empty = use default)
  ingressClassName: ""
  annotations: {}
  # Default path and pathType for the first host entry
  path: /
  pathType: Prefix
  # Primary hosts list. Each entry can contain a host and optional paths.
  hosts:
    - host: chart-example.local
      paths: []
  # TLS configuration. Example:
  # tls:
  #   - hosts:
  #       - chart-example.local
  #     secretName: chart-example-tls
  tls: []

# Resource configuration
resources:
  requests:
    cpu: 250m
    memory: 512Mi
  limits:
    cpu: 1000m
    memory: 2Gi

# Environment variables
env:
  OXY_STATE_DIR: /workspace/oxy_data
  # Optional explicit database URL. If set, this takes precedence over other DB settings.
  OXY_DATABASE_URL: ""

configMap:
  enabled: false
  # free-form map of key -> value to be included in the ConfigMap
  data: {}

# Service Account for IRSA
serviceAccount:
  create: true
  name: ""  # If empty, will auto-generate using chart name
  annotations: {}
  # Example: eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/oxy-app-role

# Persistent storage
persistence:
  enabled: true
  storageClassName: ""
  size: 20Gi
  accessMode: ReadWriteOnce
  # Mount path inside the container where the PVC will be mounted
  mountPath: /workspace
  # Folder under the mountPath to use as the OXY_STATE_DIR
  folder: oxy_data
  # Optional metadata for the PVC
  annotations: {}
  labels: {}
  # volumeMode can be "Filesystem" or "Block"
  volumeMode: Filesystem
  # Optional selector for matching existing PVs
  selector: {}

# Node selection and tolerations
nodeSelector:

tolerations:

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 3000
  # Optionally override the service resource name. If empty, uses the chart fullname
  name: ""

# Headless service for StatefulSet
headlessService:
  enabled: true

# Probes configuration
livenessProbe:
  httpGet:
    path: /
    port: 3000
  initialDelaySeconds: 10
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /
    port: 3000
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

# Security context
securityContext:
  fsGroup: 1000

# External secrets configuration
externalSecrets:
  # When true, the chart will create ExternalSecret CRs as configured below.
  # Default is false: the chart will NOT create ESO CRs and expects secrets to be
  # created externally (recommended for production).
  create: false

  # Generic lists for mounting secrets into the pod. Leave empty by default.
  # 1) Env secrets: list of existing Kubernetes Secret names whose keys will be
  #    concatenated into the application .env file. Each Secret will be mounted
  #    under /secrets/env/<secret-name> and all files will be concatenated.
  envSecretNames: []

  # Optional per-secret mapping allowing the user to provide a map of
  # key -> remoteKey for a given secret name. Used only when creating ExternalSecrets.
  # envSecretMappings:
  #   my-env-secret:
  #     DATABASE_URL: /path/to/database/url
  envSecretMappings: {}

  # 2) File secrets: list of objects that represent a secret and a specific key
  #    inside that secret which should be copied into the pod as a file.
  #    Example:
  #    fileSecrets:
  #      - name: my-datawarehouse-secret
  #        key: bigquery-key.json
  #        dest: bigquery-key.json  # optional, defaults to key
  fileSecrets: []

  # External Secrets Operator configuration (used only if create: true)
  storeRef:
    name: ""
    kind: ""

# Single SSH key configuration (preferred for simple setups)
# Use `sshKey.secretName` to point to an existing Secret in production,
# or provide `sshKey.privateKey` (inline) for development/testing only.
sshKey:
  secretName: ""    # If empty, defaults to gitSync.sshSecretName
  privateKey: ""   # Inline private SSH key (DO NOT commit to VCS)
  knownHosts: ""   # Optional known_hosts content (multiline)

# Git sync sidecar configuration
gitSync:
  period: 15s
  repository: ""
  branch: main
  sshSecretName: oxy-git-ssh
  enabled: false
  # Root directory where git-sync stores repo data (defaults to <persistence.mountPath>/git)
  root: ""
  # Link path inside the mount that points to the latest synced revision (defaults to <persistence.mountPath>/current)
  link: ""
  # Image pull policy for the git-sync init container. Valid values: Always, IfNotPresent, Never
  imagePullPolicy: IfNotPresent

  # GitHub App authentication (optional)
  # When provided, the chart will create a secret and mount it for git-sync.
  githubApp:
    secretName: ""       # Optional: existing secret name containing GitHub App data
    privateKey: ""      # PEM private key contents for GitHub App (DO NOT commit)
    privateKeyKey: "github_app_private_key" # key name in secret for private key
    applicationId: ""   # GitHub App Application ID (inline)
    applicationIdKey: "github_app_application_id" # key name in secret for app id
    clientId: ""        # GitHub App Client ID (inline)
    clientIdKey: "github_app_client_id"
    installationId: ""  # Installation ID (inline)
    installationIdKey: "github_app_installation_id" # key name in secret for installation id
    baseUrl: "https://api.github.com" # GitHub API base URL (for GHES)
    baseUrlKey: "github_app_base_url"

# HTTP authentication for git-sync (for HTTPS git repositories)
# Use this when cloning from HTTPS URLs that require username/password authentication
httpAuth:
  # Username for HTTP authentication
  username: ""
  # Inline password (for development/testing only - NOT RECOMMENDED for production)
  # For production, use secretName to reference an existing secret
  password: ""
  # Reference to an existing Kubernetes secret containing the password
  # The secret should have a key named 'password' (or specify passwordKey)
  secretName: ""
  # Key name in the secret that contains the password (defaults to 'password')
  passwordKey: "password"

database:
  # Subchart Postgres settings (optional; not selected automatically)
  postgres:
    enabled: false
    # PostgreSQL auth configuration (for chart version 16.x+)
    auth:
      username: oxy
      password: postgres
      database: oxydb
    # Legacy configuration (deprecated in chart version 16.x+)
    # Keep for backward compatibility references
    postgresqlUsername: oxy
    postgresqlPassword: postgres
    postgresqlDatabase: oxydb

  # External DB settings (optional)
  external:
    enabled: false
    # If enabled, the external DB may rely on secrets managed by the user.
    # Use `externalSecrets.envSecretNames` and `externalSecrets.fileSecrets` to
    # declare and mount any required secrets into the pod.
    storeRef:
      name: ""
      kind: SecretStore

    envSecret:
      backend: ""
      path: ""
      key: ""

    dataWarehouseSecret:
      backend: ""
      path: ""
      key: ""

    # Optional connection details for an external database. Leave empty to
    # let callers supply a full connection string via `connectionString` or
    # rely on mounted secrets.
    connectionString: ""
    user: ""
    password: ""
    host: ""
    port: 5432
    database: ""

# Allow users to supply arbitrary initContainers and sidecar containers.
# Each entry should be a Kubernetes container spec. Examples below show
# how to mount a secret and run a simple command. These are merged into
# the Pod spec as-is; the user is responsible for valid container specs.
extraInitContainers: []

# Extra sidecar containers to run alongside the main application container.
# Example usage:
# extraSidecars:
#   - name: my-sidecar
#     image: busybox:1.36
#     imagePullPolicy: IfNotPresent
#     command: ["sh", "-c", "while true; do echo sidecar; sleep 60; done"]
#     volumeMounts:
#       - name: workspace
#         mountPath: /workspace
extraSidecars: []

# PodDisruptionBudget configuration
pdb:
  enabled: false
  # Either set minAvailable or maxUnavailable. When both are set, minAvailable takes precedence.
  # Examples: 1, "50%"
  minAvailable: ""
  # Examples: 1, "25%". Leave empty to not set.
  maxUnavailable: ""
  # Optional selector labels to narrow the PDB selector. Merges with chart selectorLabels when provided.
  selector: {}
