# Default values for oxy-app
# This is a YAML-formatted file.

# Application configuration
name: oxy-app

app:
  image: ghcr.io/oxy-hq/oxy
  imageTag: ""
  port: 3000
  replicaCount: 1
  imagePullPolicy: IfNotPresent
  # Optional override for the container command. When empty, the chart will
  # use the default shell wrapper that runs `oxy serve` (readonly if gitSync disabled).
  # Example: ["/app/bin/oxy", "serve"]
  command: []

# Ingress configuration
# Enable and configure Kubernetes Ingress for the application.
ingress:
  enabled: false
  # ingressClassName allows selecting a specific IngressClass (empty = use default)
  ingressClassName: ""
  annotations: {}
  # Default path and pathType for the first host entry
  path: /
  pathType: Prefix
  # Primary hosts list. Each entry can contain a host and optional paths.
  hosts:
    - host: chart-example.local
      paths: []
  # TLS configuration. Example:
  # tls:
  #   - hosts:
  #       - chart-example.local
  #     secretName: chart-example-tls
  tls: []

# Resource configuration
resources:
  requests:
    cpu: 250m
    memory: 512Mi
  limits:
    cpu: 1000m
    memory: 2Gi

# Environment variables
env:
  OXY_STATE_DIR: /workspace/oxy_data
  # Optional explicit database URL. If set, this takes precedence over other DB settings.
  OXY_DATABASE_URL: ""

configMap:
  enabled: false
  # free-form map of key -> value to be included in the ConfigMap
  data: {}

# Service Account for IRSA
serviceAccount:
  create: true
  name: ""  # If empty, will auto-generate using chart name
  annotations: {}
  # Example: eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/oxy-app-role

# Persistent storage
persistence:
  enabled: true
  storageClassName: ""
  size: 20Gi
  accessMode: ReadWriteOnce
  # Mount path inside the container where the PVC will be mounted
  mountPath: /workspace
  # Folder under the mountPath to use as the OXY_STATE_DIR
  folder: oxy_data
  # Optional metadata for the PVC
  annotations: {}
  labels: {}
  # volumeMode can be "Filesystem" or "Block"
  volumeMode: Filesystem
  # Optional selector for matching existing PVs
  selector: {}

# Node selection and tolerations
nodeSelector:

tolerations:

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 3000
  # Optionally override the service resource name. If empty, uses the chart fullname
  name: ""

# Headless service for StatefulSet
headlessService:
  enabled: true

# Probes configuration
livenessProbe:
  httpGet:
    path: /
    port: 3000
  initialDelaySeconds: 10
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /
    port: 3000
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

# Security context
securityContext:
  fsGroup: 1000

# External secrets configuration
externalSecrets:
  # When true, the chart will create ExternalSecret CRs as configured below.
  # Default is false: the chart will NOT create ESO CRs and expects secrets to be
  # created externally (recommended for production).
  create: false

  # Generic lists for mounting secrets into the pod. Leave empty by default.
  # 1) Env secrets: list of existing Kubernetes Secret names whose keys will be
  #    concatenated into the application .env file. Each Secret will be mounted
  #    under /secrets/env/<secret-name> and all files will be concatenated.
  envSecretNames: []

  # Optional per-secret mapping allowing the user to provide a map of
  # key -> remoteKey for a given secret name. Used only when creating ExternalSecrets.
  # envSecretMappings:
  #   my-env-secret:
  #     DATABASE_URL: /path/to/database/url
  envSecretMappings: {}

  # 2) File secrets: list of objects that represent a secret and a specific key
  #    inside that secret which should be copied into the pod as a file.
  #    Example:
  #    fileSecrets:
  #      - name: my-datawarehouse-secret
  #        key: bigquery-key.json
  #        dest: bigquery-key.json  # optional, defaults to key
  fileSecrets: []

  # External Secrets Operator configuration (used only if create: true)
  storeRef:
    name: ""
    kind: ""

# SSH key for git operations (base64 encoded)
# In production, this should be managed through external secrets
sshKey:
  # Keep keys out of chart values in production. Use `gitSync.sshSecretName`
  # and create the secret in-cluster or via external secrets operator.
  privateKey: ""
  publicKey: ""

# Git sync sidecar configuration
gitSync:
  period: 15s
  repository: ""
  branch: main
  userName: ""
  userEmail: ""
  # DEPRECATED: Use sshKeys array for single or multiple SSH keys
  # Kept for backward compatibility. If sshKeys is empty, this will be used.
  sshSecretName: oxy-git-ssh
  # SSH keys for git authentication. Supports multiple keys for different hosts/repos.
  # Each entry should contain:
  #   - secretName: Name of the Kubernetes secret containing SSH key(s)
  #   - mountPath: Where to mount the secret (default: /etc/git-secret/keys/<index>)
  # The primary SSH key (first entry or sshSecretName) will be used with --ssh-key-file
  # Additional keys will be mounted and available for SSH to try automatically.
  # Example:
  # sshKeys:
  #   - secretName: github-ssh-key
  #     mountPath: /etc/git-secret/github
  #   - secretName: gitlab-ssh-key
  #     mountPath: /etc/git-secret/gitlab
  # For SSH config approach, use the 'secrets' field to mount a custom SSH config.
  sshKeys: []
  enabled: false
  # Root directory where git-sync stores repo data (defaults to <persistence.mountPath>/git)
  root: ""
  # Link path inside the mount that points to the latest synced revision (defaults to <persistence.mountPath>/current)
  link: ""
  # Image pull policy for the git-sync init container. Valid values: Always, IfNotPresent, Never
  imagePullPolicy: IfNotPresent
  # Additional secrets to mount in git-clone and git-sync containers.
  # Each entry should contain 'name' (secret name) and 'mountPath' (where to mount).
  # Example:
  # secrets:
  #   - name: my-git-credentials
  #     mountPath: /etc/git-credentials
  #   - name: another-secret
  #     mountPath: /etc/another
  secrets: []
  # Custom arguments to pass to git-sync/git-clone containers.
  # These will be appended to the default args and can override default behavior.
  # Note: Some flags like --verbose, --depth, etc. will override the chart's defaults.
  # Example:
  # customArgs:
  #   - --git-gc=always
  #   - --submodules=recursive
  #   - --depth=10  # Override default --depth=1
  customArgs: []

database:
  # Subchart Postgres settings (optional; not selected automatically)
  postgres:
    enabled: false
    postgresqlPassword: postgres
    postgresqlDatabase: oxydb
    postgresqlUsername: oxy

  # External DB settings (optional)
  external:
    enabled: false
    # If enabled, the external DB may rely on secrets managed by the user.
    # Use `externalSecrets.envSecretNames` and `externalSecrets.fileSecrets` to
    # declare and mount any required secrets into the pod.
    storeRef:
      name: ""
      kind: SecretStore

    envSecret:
      backend: ""
      path: ""
      key: ""

    dataWarehouseSecret:
      backend: ""
      path: ""
      key: ""

    # Optional connection details for an external database. Leave empty to
    # let callers supply a full connection string via `connectionString` or
    # rely on mounted secrets.
    connectionString: ""
    user: ""
    password: ""
    host: ""
    port: 5432
    database: ""

# Allow users to supply arbitrary initContainers and sidecar containers.
# Each entry should be a Kubernetes container spec. Examples below show
# how to mount a secret and run a simple command. These are merged into
# the Pod spec as-is; the user is responsible for valid container specs.
extraInitContainers: []

# Extra sidecar containers to run alongside the main application container.
# Example usage:
# extraSidecars:
#   - name: my-sidecar
#     image: busybox:1.36
#     imagePullPolicy: IfNotPresent
#     command: ["sh", "-c", "while true; do echo sidecar; sleep 60; done"]
#     volumeMounts:
#       - name: workspace
#         mountPath: /workspace
extraSidecars: []

# PodDisruptionBudget configuration
pdb:
  enabled: false
  # Either set minAvailable or maxUnavailable. When both are set, minAvailable takes precedence.
  # Examples: 1, "50%"
  minAvailable: ""
  # Examples: 1, "25%". Leave empty to not set.
  maxUnavailable: ""
  # Optional selector labels to narrow the PDB selector. Merges with chart selectorLabels when provided.
  selector: {}
