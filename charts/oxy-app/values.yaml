# Default values for oxy-app
# This is a YAML-formatted file.

# Application configuration
name: oxy-app

app:
  image: ghcr.io/oxy-hq/oxy
  imageTag: ""
  port: 3000
  replicaCount: 1

# Ingress configuration
# Enable and configure Kubernetes Ingress for the application.
ingress:
  enabled: false
  # ingressClassName allows selecting a specific IngressClass (empty = use default)
  ingressClassName: ""
  annotations: {}
  # Default path and pathType for the first host entry
  path: /
  pathType: Prefix
  # Primary hosts list. Each entry can contain a host and optional paths.
  hosts:
    - host: chart-example.local
      paths: []
  # TLS configuration. Example:
  # tls:
  #   - hosts:
  #       - chart-example.local
  #     secretName: chart-example-tls
  tls: []

# Resource configuration
resources:
  requests:
    cpu: 250m
    memory: 512Mi
  limits:
    cpu: 1000m
    memory: 2Gi

# Environment variables
env:
  OXY_STATE_DIR: /workspace/oxy_data

configMap:
  enabled: false
  # free-form map of key -> value to be included in the ConfigMap
  data: {}

# Service Account for IRSA
serviceAccount:
  create: true
  name: oxy-app-sa
  annotations: {}
  # Example: eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/oxy-app-role

# Persistent storage
persistence:
  enabled: true
  storageClassName: gp3
  size: 20Gi
  accessMode: ReadWriteOnce
  # Mount path inside the container where the PVC will be mounted
  mountPath: /workspace
  # Folder under the mountPath to use as the OXY_STATE_DIR
  folder: oxy_data
  # Optional metadata for the PVC
  annotations: {}
  labels: {}
  # volumeMode can be "Filesystem" or "Block"
  volumeMode: Filesystem
  # Optional selector for matching existing PVs
  selector: {}

# Node selection and tolerations
nodeSelector:

tolerations:

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 3000
  # Optionally override the service resource name. If empty, defaults to '<release-name>-service'
  name: ""

# Headless service for StatefulSet
headlessService:
  enabled: true

# Probes configuration
livenessProbe:
  httpGet:
    path: /
    port: 3000
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /
    port: 3000
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

# Security context
securityContext:
  fsGroup: 1000

# External secrets configuration
externalSecrets:
  # When true, the chart will create ExternalSecret CRs as configured below.
  # Default is false: the chart will NOT create ESO CRs and expects secrets to be
  # created externally (recommended for production).
  create: false

  # Generic lists for mounting secrets into the pod. Leave empty by default.
  # 1) Env secrets: list of existing Kubernetes Secret names whose keys will be
  #    concatenated into the application .env file. Each Secret will be mounted
  #    under /secrets/env/<secret-name> and all files will be concatenated.
  envSecretNames: []

  # Optional per-secret mapping allowing the user to provide a map of
  # key -> remoteKey for a given secret name. Used only when creating ExternalSecrets.
  # envSecretMappings:
  #   my-env-secret:
  #     DATABASE_URL: /path/to/database/url
  envSecretMappings: {}

  # 2) File secrets: list of objects that represent a secret and a specific key
  #    inside that secret which should be copied into the pod as a file.
  #    Example:
  #    fileSecrets:
  #      - name: my-datawarehouse-secret
  #        key: bigquery-key.json
  #        dest: bigquery-key.json  # optional, defaults to key
  fileSecrets: []

  # External Secrets Operator configuration (used only if create: true)
  storeRef:
    name: ""
    kind: ""

# SSH key for git operations (base64 encoded)
# In production, this should be managed through external secrets
sshKey:
  # Keep keys out of chart values in production. Use `gitSync.sshSecretName`
  # and create the secret in-cluster or via external secrets operator.
  privateKey: ""
  publicKey: ""

# Git sync sidecar configuration
gitSync:
  period: 15s
  repository: ""
  branch: main
  userName: ""
  userEmail: ""
  sshSecretName: oxy-git-ssh
  enabled: false
  # Root directory where git-sync stores repo data (defaults to <persistence.mountPath>/git)
  root: ""
  # Link path inside the mount that points to the latest synced revision (defaults to <persistence.mountPath>/current)
  link: ""

database:
  # Subchart Postgres settings (optional; not selected automatically)
  postgres:
    enabled: false
    postgresqlPassword: postgres
    postgresqlDatabase: oxydb
    postgresqlUsername: oxy

  # External DB settings (optional)
  external:
    enabled: false
    # If enabled, the external DB may rely on secrets managed by the user.
    # Use `externalSecrets.envSecretNames` and `externalSecrets.fileSecrets` to
    # declare and mount any required secrets into the pod.
    storeRef:
      name: ""
      kind: SecretStore # or ClusterSecretStore

    envSecret:
      backend: ""
      path: ""
      key: ""

    dataWarehouseSecret:
      backend: ""
      path: ""
      key: ""
