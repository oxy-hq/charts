{{- if and .Values.externalSecrets.create (not (empty .Values.externalSecrets.storeRef.name)) }}
{{- $storeName := $.Values.externalSecrets.storeRef.name }}
{{- $storeKind := $.Values.externalSecrets.storeRef.kind }}

{{- /* Generate ExternalSecret for each env secret name. The controller should map keys to files. */ -}}
{{- range $i, $s := $.Values.externalSecrets.envSecretNames }}
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ $s }}
  namespace: {{ $.Release.Namespace }}
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: {{ $storeName }}
    kind: {{ $storeKind }}
  target:
    name: {{ $s }}
    creationPolicy: Owner
  # If the user provided a mapping for this env secret in values (under
  # externalSecrets.envSecretMappings), use that to map specific remote keys
  # to local secret keys. Otherwise leave `data: []` so the controller may map
  # the whole remote path depending on provider.
  {{- $mapping := index $.Values.externalSecrets.envSecretMappings $s }}
  {{- if $mapping }}
  data:
  {{- range $k, $v := $mapping }}
    - secretKey: {{ $k }}
      remoteRef:
        key: {{ $v | quote }}
  {{- end }}
  {{- else }}
  data: []
  {{- end }}
{{- end }}

{{- /* Generate ExternalSecret resources for fileSecrets list */ -}}
{{- range $i, $fs := $.Values.externalSecrets.fileSecrets }}
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ $fs.name }}
  namespace: {{ $.Release.Namespace }}
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: {{ $storeName }}
    kind: {{ $storeKind }}
  target:
    name: {{ $fs.name }}
    creationPolicy: Owner
  data:
    - secretKey: {{ default $fs.key $fs.key }}
      remoteRef:
        key: {{ $fs.path | default $fs.name }}
{{- end }}
{{- end }}
