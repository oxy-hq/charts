suite: ingress comprehensive tests
templates:
  - ingress.yaml

tests:
  # Ingress disabled by default
  - it: does not render Ingress when disabled
    set:
      ingress.enabled: false
    asserts:
      - hasDocuments:
          count: 0

  # Basic ingress configuration
  - it: renders Ingress with basic configuration
    set:
      ingress.enabled: true
    asserts:
      - equal:
          path: kind
          value: Ingress
      - equal:
          path: apiVersion
          value: networking.k8s.io/v1
      - equal:
          path: metadata.name
          value: RELEASE-NAME
      - contains:
          path: metadata.labels
          content:
            app: RELEASE-NAME
            chart: oxy-app-0.1.13
            release: RELEASE-NAME

  # Ingress class configuration
  - it: sets ingressClassName when specified
    set:
      ingress.enabled: true
      ingress.ingressClassName: "nginx"
    asserts:
      - equal:
          path: spec.ingressClassName
          value: nginx

  - it: does not set ingressClassName when empty
    set:
      ingress.enabled: true
      ingress.ingressClassName: ""
    asserts:
      - notExists:
          path: spec.ingressClassName

  # Annotations
  - it: includes custom annotations
    set:
      ingress.enabled: true
      ingress.annotations:
        nginx.ingress.kubernetes.io/rewrite-target: "/"
        nginx.ingress.kubernetes.io/ssl-redirect: "false"
        custom.annotation/test: "value"
    asserts:
      - equal:
          path: metadata.annotations["nginx.ingress.kubernetes.io/rewrite-target"]
          value: "/"
      - equal:
          path: metadata.annotations["nginx.ingress.kubernetes.io/ssl-redirect"]
          value: "false"
      - equal:
          path: metadata.annotations["custom.annotation/test"]
          value: "value"

  # Single host configuration
  - it: configures single host correctly
    set:
      ingress.enabled: true
      ingress.hosts:
        - host: "example.com"
          paths: []
    asserts:
      - equal:
          path: spec.rules[0].host
          value: "example.com"
      - equal:
          path: spec.rules[0].http.paths[0].path
          value: "/"
      - equal:
          path: spec.rules[0].http.paths[0].pathType
          value: "Prefix"

  # Multiple hosts configuration
  - it: configures multiple hosts correctly
    set:
      ingress.enabled: true
      ingress.hosts:
        - host: "app.example.com"
          paths: []
        - host: "api.example.com"
          paths: []
        - host: "admin.example.com"
          paths: []
    asserts:
      - equal:
          path: spec.rules | length
          value: 3
      - equal:
          path: spec.rules[0].host
          value: "app.example.com"
      - equal:
          path: spec.rules[1].host
          value: "api.example.com"
      - equal:
          path: spec.rules[2].host
          value: "admin.example.com"

  # Custom paths configuration
  - it: configures custom paths for hosts
    set:
      ingress.enabled: true
      ingress.hosts:
        - host: "api.example.com"
          paths:
            - path: "/api/v1"
              pathType: "Prefix"
            - path: "/api/v2"
              pathType: "Prefix"
            - path: "/health"
              pathType: "Exact"
    asserts:
      - equal:
          path: spec.rules[0].http.paths | length
          value: 3
      - equal:
          path: spec.rules[0].http.paths[0].path
          value: "/api/v1"
      - equal:
          path: spec.rules[0].http.paths[0].pathType
          value: "Prefix"
      - equal:
          path: spec.rules[0].http.paths[1].path
          value: "/api/v2"
      - equal:
          path: spec.rules[0].http.paths[2].path
          value: "/health"
      - equal:
          path: spec.rules[0].http.paths[2].pathType
          value: "Exact"

  # Default path and pathType
  - it: uses default path and pathType when paths empty
    set:
      ingress.enabled: true
      ingress.path: "/custom"
      ingress.pathType: "Exact"
      ingress.hosts:
        - host: "example.com"
          paths: []
    asserts:
      - equal:
          path: spec.rules[0].http.paths[0].path
          value: "/custom"
      - equal:
          path: spec.rules[0].http.paths[0].pathType
          value: "Exact"

  # Backend service configuration
  - it: configures correct backend service
    set:
      ingress.enabled: true
      ingress.hosts:
        - host: "example.com"
          paths: []
    asserts:
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.name
          value: RELEASE-NAME-service
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.port.number
          value: 80

  # Custom service name in backend
  - it: uses custom service name in backend
    set:
      ingress.enabled: true
      service.name: "custom-service"
      ingress.hosts:
        - host: "example.com"
          paths: []
    asserts:
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.name
          value: custom-service

  # TLS configuration
  - it: does not include TLS when empty
    set:
      ingress.enabled: true
      ingress.tls: []
    asserts:
      - notExists:
          path: spec.tls

  - it: configures TLS correctly
    set:
      ingress.enabled: true
      ingress.tls:
        - hosts:
            - "example.com"
            - "api.example.com"
          secretName: "example-tls"
        - hosts:
            - "admin.example.com"
          secretName: "admin-tls"
    asserts:
      - equal:
          path: spec.tls | length
          value: 2
      - equal:
          path: spec.tls[0].secretName
          value: "example-tls"
      - contains:
          path: spec.tls[0].hosts
          content: "example.com"
      - contains:
          path: spec.tls[0].hosts
          content: "api.example.com"
      - equal:
          path: spec.tls[1].secretName
          value: "admin-tls"
      - contains:
          path: spec.tls[1].hosts
          content: "admin.example.com"

  # Complex real-world scenario
  - it: handles complex multi-host multi-path TLS configuration
    set:
      ingress.enabled: true
      ingress.ingressClassName: "nginx"
      ingress.annotations:
        nginx.ingress.kubernetes.io/rewrite-target: "/$2"
        nginx.ingress.kubernetes.io/use-regex: "true"
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
        cert-manager.io/cluster-issuer: "letsencrypt-prod"
      ingress.hosts:
        - host: "app.example.com"
          paths:
            - path: "/api(/|$)(.*)"
              pathType: "Prefix"
            - path: "/health"
              pathType: "Exact"
        - host: "admin.example.com"
          paths:
            - path: "/dashboard"
              pathType: "Prefix"
            - path: "/metrics"
              pathType: "Exact"
      ingress.tls:
        - hosts:
            - "app.example.com"
            - "admin.example.com"
          secretName: "example-com-tls"
    asserts:
      - equal:
          path: spec.ingressClassName
          value: nginx
      - equal:
          path: metadata.annotations["nginx.ingress.kubernetes.io/rewrite-target"]
          value: "/$2"
      - equal:
          path: metadata.annotations["cert-manager.io/cluster-issuer"]
          value: "letsencrypt-prod"
      - equal:
          path: spec.rules | length
          value: 2
      - equal:
          path: spec.rules[0].http.paths | length
          value: 2
      - equal:
          path: spec.rules[1].http.paths | length
          value: 2
      - equal:
          path: spec.tls | length
          value: 1
      - equal:
          path: spec.tls[0].hosts | length
          value: 2

  # Edge case: No hosts specified (should not render)
  - it: does not render when hosts array is empty
    set:
      ingress.enabled: true
      ingress.hosts: []
    asserts:
      - hasDocuments:
          count: 0

  # Default host fallback
  - it: uses default host when none specified in values
    set:
      ingress.enabled: true
    asserts:
      - equal:
          path: spec.rules[0].host
          value: "chart-example.local"