suite: statefulset focused tests
templates:
  - statefulset.yaml

tests:
  # Basic StatefulSet structure
  - it: should create a StatefulSet
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: metadata.name
          value: RELEASE-NAME

  # Git sync disabled (default state)
  - it: should have single container when git sync disabled
    set:
      gitSync:
        enabled: false
    asserts:
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - equal:
          path: spec.template.spec.containers[0].name
          value: RELEASE-NAME

  - it: should include readonly flag when git sync disabled
    set:
      gitSync:
        enabled: false
    asserts:
      - matchRegex:
          path: spec.template.spec.containers[0].command[2]
          pattern: ".*--readonly.*"

  # Git sync enabled scenarios
  - it: should have two containers when git sync enabled
    set:
      gitSync:
        enabled: true
        repository: "git@github.com:example/repo.git"
      persistence:
        enabled: true
    asserts:
      - lengthEqual:
          path: spec.template.spec.containers
          count: 2
      - equal:
          path: spec.template.spec.containers[0].name
          value: RELEASE-NAME
      - equal:
          path: spec.template.spec.containers[1].name
          value: git-sync

  - it: should configure git sync container correctly
    set:
      gitSync:
        enabled: true
        repository: "git@github.com:example/repo.git"
        branch: "main"
        period: "30s"
      persistence:
        enabled: true
        mountPath: "/workspace"
    asserts:
      - equal:
          path: spec.template.spec.containers[1].image
          value: "k8s.gcr.io/git-sync/git-sync:v4.4.3"
      - contains:
          path: spec.template.spec.containers[1].args
          content: "--repo=git@github.com:example/repo.git"
      - contains:
          path: spec.template.spec.containers[1].args
          content: "--branch=main"
      - contains:
          path: spec.template.spec.containers[1].args
          content: "--period=30s"

  - it: should not include readonly flag when git sync enabled
    set:
      gitSync:
        enabled: true
        repository: "git@github.com:example/repo.git"
      persistence:
        enabled: true
    asserts:
      - notMatchRegex:
          path: spec.template.spec.containers[0].command[2]
          pattern: ".*--readonly.*"

  # Persistence scenarios
  - it: should create volume claim template when persistence enabled
    set:
      persistence:
        enabled: true
        size: "50Gi"
        storageClassName: "fast-ssd"
    asserts:
      - lengthEqual:
          path: spec.volumeClaimTemplates
          count: 1
      - equal:
          path: spec.volumeClaimTemplates[0].metadata.name
          value: workspace
      - equal:
          path: spec.volumeClaimTemplates[0].spec.resources.requests.storage
          value: "50Gi"
      - equal:
          path: spec.volumeClaimTemplates[0].spec.storageClassName
          value: "fast-ssd"

  - it: should always create workspace volume claim template
    set:
      persistence:
        enabled: false
    asserts:
      - lengthEqual:
          path: spec.volumeClaimTemplates
          count: 1
      - equal:
          path: spec.volumeClaimTemplates[0].metadata.name
          value: workspace

  # Init containers
  - it: should not have init containers by default
    set:
      gitSync:
        enabled: false
    asserts:
      - notExists:
          path: spec.template.spec.initContainers

  - it: should have git clone init container when git sync enabled
    set:
      gitSync:
        enabled: true
        repository: "git@github.com:example/repo.git"
      persistence:
        enabled: true
    asserts:
      - lengthEqual:
          path: spec.template.spec.initContainers
          count: 1
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: git-clone

  - it: should add extra init containers
    set:
      extraInitContainers:
        - name: custom-init
          image: busybox:1.36
          command: ["echo", "hello"]
    asserts:
      - lengthEqual:
          path: spec.template.spec.initContainers
          count: 1
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: custom-init

  # Sidecars
  - it: should add extra sidecar containers
    set:
      extraSidecars:
        - name: monitoring
          image: prom/node-exporter:v1.6.0
    asserts:
      - lengthEqual:
          path: spec.template.spec.containers
          count: 2
      - equal:
          path: spec.template.spec.containers[1].name
          value: monitoring

  # Combined git sync and sidecars
  - it: should work with git sync and sidecars together
    set:
      gitSync:
        enabled: true
        repository: "git@github.com:example/repo.git"
      extraSidecars:
        - name: monitoring
          image: prom/node-exporter:v1.6.0
      persistence:
        enabled: true
    asserts:
      - lengthEqual:
          path: spec.template.spec.containers
          count: 3
      - equal:
          path: spec.template.spec.containers[0].name
          value: RELEASE-NAME
      - equal:
          path: spec.template.spec.containers[1].name
          value: git-sync
      - equal:
          path: spec.template.spec.containers[2].name
          value: monitoring

  # External secrets
  - it: should have empty volumes list by default
    asserts:
      - lengthEqual:
          path: spec.template.spec.volumes
          count: 0

  - it: should mount environment secrets when specified
    set:
      externalSecrets:
        envSecretNames:
          - "app-secrets"
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: env-secret-0
            secret:
              secretName: "app-secrets"
              optional: true

  # Resource configuration
  - it: should configure resources correctly
    set:
      resources:
        requests:
          cpu: "500m"
          memory: "1Gi"
        limits:
          cpu: "2000m"
          memory: "4Gi"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].resources.requests.cpu
          value: "500m"
      - equal:
          path: spec.template.spec.containers[0].resources.limits.memory
          value: "4Gi"

  # Replica scaling
  - it: should support replica scaling
    set:
      app:
        replicaCount: 3
    asserts:
      - equal:
          path: spec.replicas
          value: 3

  # Service configuration
  - it: should configure headless service correctly
    asserts:
      - equal:
          path: spec.serviceName
          value: RELEASE-NAME-oxy-app-headless

  # Security context
  - it: should apply security context
    set:
      securityContext:
        fsGroup: 2000
    asserts:
      - equal:
          path: spec.template.spec.securityContext.fsGroup
          value: 2000

  # Configuration validation
  - it: should use empty repository when not specified
    set:
      gitSync:
        enabled: true
        repository: ""
      persistence:
        enabled: true
    asserts:
      - contains:
          path: spec.template.spec.containers[1].args
          content: "--repo="