suite: statefulset external secrets tests
templates:
  - statefulset.yaml

tests:
  # No external secrets by default
  - it: should not mount external secrets by default
    set:
      externalSecrets:
        create: false
        envSecretNames: []
        fileSecrets: []
    asserts:
      - isKind:
          of: StatefulSet
      - notContains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: env-secrets
      - notContains:
          path: spec.template.spec.volumes
          content:
            name: env-secrets

  # Environment secrets mounting
  - it: should mount environment secrets when specified
    set:
      externalSecrets:
        envSecretNames:
          - "app-env-secrets"
          - "database-secrets"
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: env-secrets
            mountPath: /secrets/env
            readOnly: true
      - contains:
          path: spec.template.spec.volumes
          content:
            name: env-secrets
            projected:
              sources:
                - secret:
                    name: "app-env-secrets"
                - secret:
                    name: "database-secrets"

  - it: should mount single environment secret
    set:
      externalSecrets:
        envSecretNames:
          - "single-secret"
    asserts:
      - contains:
          path: spec.template.spec.volumes[?(@.name=="env-secrets")].projected.sources
          content:
            secret:
              name: "single-secret"

  - it: should mount multiple environment secrets
    set:
      externalSecrets:
        envSecretNames:
          - "secret-one"
          - "secret-two"
          - "secret-three"
    asserts:
      - equal:
          path: spec.template.spec.volumes[?(@.name=="env-secrets")].projected.sources | length
          value: 3

  # File secrets mounting
  - it: should mount file secrets when specified
    set:
      externalSecrets:
        fileSecrets:
          - name: "ssl-certs"
            key: "tls.crt"
            dest: "server.crt"
          - name: "ssl-certs"
            key: "tls.key"
            dest: "server.key"
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: file-secrets
            mountPath: /secrets/files
            readOnly: true
      - contains:
          path: spec.template.spec.volumes
          content:
            name: file-secrets
            projected:
              sources:
                - secret:
                    name: "ssl-certs"
                    items:
                      - key: "tls.crt"
                        path: "server.crt"
                - secret:
                    name: "ssl-certs"
                    items:
                      - key: "tls.key"
                        path: "server.key"

  - it: should use key as dest when dest not specified
    set:
      externalSecrets:
        fileSecrets:
          - name: "config-secret"
            key: "config.yaml"
    asserts:
      - contains:
          path: spec.template.spec.volumes[?(@.name=="file-secrets")].projected.sources
          content:
            secret:
              name: "config-secret"
              items:
                - key: "config.yaml"
                  path: "config.yaml"

  # Complex file secrets scenario
  - it: should handle complex file secrets configuration
    set:
      externalSecrets:
        fileSecrets:
          - name: "database-certs"
            key: "ca.crt"
            dest: "db-ca.crt"
          - name: "database-certs"
            key: "client.crt"
            dest: "db-client.crt"
          - name: "database-certs"
            key: "client.key"
            dest: "db-client.key"
          - name: "api-keys"
            key: "service-account.json"
            dest: "gcp-sa.json"
    asserts:
      - equal:
          path: spec.template.spec.volumes[?(@.name=="file-secrets")].projected.sources | length
          value: 4

  # Both env and file secrets
  - it: should mount both environment and file secrets
    set:
      externalSecrets:
        envSecretNames:
          - "app-config"
          - "database-config"
        fileSecrets:
          - name: "ssl-certs"
            key: "tls.crt"
          - name: "api-keys"
            key: "service-key.json"
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: env-secrets
            mountPath: /secrets/env
            readOnly: true
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: file-secrets
            mountPath: /secrets/files
            readOnly: true
      - equal:
          path: spec.template.spec.volumes | length
          value: 3  # workspace + env-secrets + file-secrets

  # Secrets with git sync
  - it: should mount secrets alongside git sync volumes
    set:
      gitSync:
        enabled: true
        repository: "git@github.com:example/repo.git"
      externalSecrets:
        envSecretNames:
          - "git-sync-config"
        fileSecrets:
          - name: "git-ssh-keys"
            key: "id_rsa"
      persistence:
        enabled: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: env-secrets
            mountPath: /secrets/env
            readOnly: true
      - contains:
          path: spec.template.spec.containers[1].volumeMounts
          content:
            name: git-ssh-key
            mountPath: /etc/git-secret
            readOnly: true

  # Secrets with sidecars
  - it: should share secrets with sidecar containers
    set:
      externalSecrets:
        envSecretNames:
          - "shared-config"
        fileSecrets:
          - name: "shared-certs"
            key: "ca.crt"
      extraSidecars:
        - name: config-watcher
          image: busybox:1.36
          volumeMounts:
            - name: env-secrets
              mountPath: /secrets/env
              readOnly: true
            - name: file-secrets
              mountPath: /secrets/files
              readOnly: true
    asserts:
      - contains:
          path: spec.template.spec.containers[1].volumeMounts
          content:
            name: env-secrets
            mountPath: /secrets/env
            readOnly: true
      - contains:
          path: spec.template.spec.containers[1].volumeMounts
          content:
            name: file-secrets
            mountPath: /secrets/files
            readOnly: true

  # Secret volume permissions
  - it: should set correct permissions for secret volumes
    set:
      externalSecrets:
        envSecretNames:
          - "env-secret"
        fileSecrets:
          - name: "file-secret"
            key: "secret.key"
    asserts:
      - equal:
          path: spec.template.spec.volumes[?(@.name=="env-secrets")].projected.defaultMode
          value: 0644
      - equal:
          path: spec.template.spec.volumes[?(@.name=="file-secrets")].projected.defaultMode
          value: 0644

  # Custom mount paths
  - it: should support custom secret mount paths
    set:
      externalSecrets:
        envSecretNames:
          - "custom-env"
        envMountPath: "/app/config/env"
        fileSecrets:
          - name: "custom-files"
            key: "config.json"
        fileMountPath: "/app/config/files"
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: env-secrets
            mountPath: "/app/config/env"
            readOnly: true
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: file-secrets
            mountPath: "/app/config/files"
            readOnly: true

  # Secret validation
  - it: should handle empty secret names gracefully
    set:
      externalSecrets:
        envSecretNames: []
        fileSecrets: []
    asserts:
      - notContains:
          path: spec.template.spec.volumes
          content:
            name: env-secrets
      - notContains:
          path: spec.template.spec.volumes
          content:
            name: file-secrets

  # External secrets operator integration
  - it: should not interfere with ESO when create is false
    set:
      externalSecrets:
        create: false
        envSecretNames:
          - "eso-managed-secret"
    asserts:
      - contains:
          path: spec.template.spec.volumes[?(@.name=="env-secrets")].projected.sources
          content:
            secret:
              name: "eso-managed-secret"

  # Database secrets integration
  - it: should work with database secrets
    set:
      externalSecrets:
        envSecretNames:
          - "postgres-credentials"
        fileSecrets:
          - name: "postgres-certs"
            key: "server-ca.pem"
          - name: "postgres-certs"
            key: "client-cert.pem"
          - name: "postgres-certs"
            key: "client-key.pem"
      database:
        external:
          enabled: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: env-secrets
            mountPath: /secrets/env
            readOnly: true
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: file-secrets
            mountPath: /secrets/files
            readOnly: true

  # Error conditions
  - it: should handle missing secret name
    set:
      externalSecrets:
        fileSecrets:
          - key: "missing-name.key"
    asserts:
      - failedTemplate:
          errorMessage: "fileSecret name is required"

  - it: should handle missing secret key
    set:
      externalSecrets:
        fileSecrets:
          - name: "valid-secret"
    asserts:
      - failedTemplate:
          errorMessage: "fileSecret key is required"